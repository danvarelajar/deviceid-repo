input {
    file {
        path => "/var/log/bigip/bot/*.log"
        start_position => beginning
        type =>"botlogs"
    }
        file {
        path => "/var/log/bigip/http/*.log"
        type =>"httplogs"
    }
            file {
        path => "/var/log/bigip/awf/*.log"
        type =>"awflogs"
    }
}

filter {
        if [type] == "botlogs" {
        grok {
                                match => {"message" =>  ["%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:eventSourceIP}%{SPACE}%{GREEDYDATA:xdata}"] }
        }
        kv {
                                source => "xdata"
                                field_split => ","
                                value_split => "="
        }
        date {
                                match => [ "timestamp" , "UNIX_MS"]
                                target => "@timestamp"
        }
        geoip {
                                source => "client_ip"
                                database => "/etc/logstash/GeoLite2-City.mmdb"
        }
                }
                if [type] == "httplogs" {
                                grok {
                match => { "message" => "#%{NUMBER:timestamp}#%{DATA:uName}#%{DATA:virtual_name}#%{IP:clientip}#%{POSINT:client_port}#%{DATA:xff_ip}#%{DATA:lb_server}#%{DATA:http_host}#%{DATA:http_method}#%{DATA:http_request_uri}#%{NUMBER:status_code}#%{DATA:content_type}#%{NUMBER:content_length}#%{DATA:deviceA}#%{DATA:deviceB}#%{DATA:http_user_agent}#%{NUMBER:authcode}#"}
                                        }
        date {
                match => [ "timestamp" , "UNIX_MS"]
                target => "@timestamp"
                }
                geoip {
                source => "xff_ip"
                                database => "/etc/logstash/GeoLite2-City.mmdb"
            }
                }

        if [type] == "awflogs" {
            grok {
                match => {
                    "message" => [
                    "attack_type=\"%{DATA:attack_type}\"",
                    ",blocking_exception_reason=\"%{DATA:blocking_exception_reason}\"",
                    ",date_time=\"%{DATA:date_time}\"",
                    ",dest_port=\"%{DATA:dest_port}\"",
                    ",ip_client=\"%{DATA:ip_client}\"",
                    ",ip_address_intelligence=\"%{DATA:ip_address_intelligence}\"",
                    ",username=\"%{DATA:username}\"",
                    ",session_id=\"%{DATA:session_id}\"",
                    ",is_truncated=\"%{DATA:is_truncated}\"",
                    ",method=\"%{DATA:method}\"",
                    ",policy_name=\"%{DATA:policy_name}\"",
                    ",protocol=\"%{DATA:protocol}\"",
                    ",request_status=\"%{DATA:request_status}\"",
                    ",response_code=\"%{DATA:response_code}\"",
                    ",severity=\"%{DATA:severity}\"",
                    ",sig_cves=\"%{DATA:sig_cves}\"",
                    ",staged_sig_cves=\"%{DATA:staged_sig_cves}\"",
                    ",sig_ids=\"%{DATA:sig_ids}\"",
                    ",sig_names=\"%{DATA:sig_names}\"",
                    ",sig_set_names=\"%{DATA:sig_set_names}\"",
                    ",staged_sig_ids=\"%{DATA:staged_sig_ids}\"",
                    ",staged_sig_names=\"%{DATA:staged_sig_names}\"",
                    ",threat_campaign_names=\"%{DATA:threat_campaign_names}\"",
                    ",staged_threat_campaign_names=\"%{DATA:staged_threat_campaign_names}\"",
                    ",src_port=\"%{DATA:src_port}\"",
                    ",sub_violations=\"%{DATA:sub_violations}\"",
                    ",support_id=\"%{DATA:support_id}\"",
                    "unit_hostname=\"%{DATA:unit_hostname}\"",
                    ",uri=\"%{DATA:uri}\"",
                    ",violation_rating=\"%{DATA:violation_rating}\"",
                    ",vs_name=\"%{DATA:vs_name}\"",
                    ",x_forwarded_for_header_value=\"%{DATA:x_forwarded_for_header_value}\"",
                    ",outcome=\"%{DATA:outcome}\"",
                    ",outcome_reason=\"%{DATA:outcome_reason}\"",
                    ",violations=\"%{DATA:violations}\"",
                    ",violation_details=\"%{DATA:violation_details}\"",
                    ",request=\"%{DATA:request}\""
                    ]
                }
                match => {
                    "message" => [ "_imp_apg_r_=(?<deviceid_raw>[^(;|\\)]*)" ]
                }
                match => {
                    "message" => [ "User-Agent: (?<user_agent>[^\\]*)" ]
                }
                break_on_match => false
            }
            if ![deviceid_raw] {
                mutate {
                    add_field => { "deviceid_raw" => "Empty" }
                }
            } else {
                urldecode {
                    field => "deviceid_raw" 
                }
                json {
                    source => "deviceid_raw"
                }
            }
            if [x_forwarded_for_header_value] != "N/A" {
                mutate { add_field => { "source_host" => "%{x_forwarded_for_header_value}"}}
            } else {
                mutate { add_field => { "source_host" => "%{ip_client}"}}
            }
            if [username] == "N/A" {
                mutate { replace =>  {"username" => "Unauthenticated"} }
            }
            if [violations] == "N/A" {
                mutate { remove_field =>  ["violations"] }
            }
            if [ip_address_intelligence] == "N/A" {
                mutate { remove_field =>  ["ip_address_intelligence"] }
            }
            geoip {
                source => "source_host"
                fields => ["location", "country_name"]
                database => "/etc/logstash/GeoLite2-City.mmdb"
            }
            geoip {
                source => "source_host"
                default_database_type => "ASN"
                database => "/etc/logstash/GeoLite2-ASN.mmdb"
            }
            mutate {
                split => { "attack_type" => "," }
                split => { "sig_ids" => "," }
                split => { "sig_names" => "," }
                split => { "sig_cves" => "," }
                split => { "staged_sig_ids" => "," }
                split => { "staged_sig_names" => "," }
                split => { "staged_sig_cves" => "," }
                split => { "sig_set_names" => "," }
                split => { "threat_campaign_names" => "," }
                split => { "staged_threat_campaign_names" => "," }
                split => { "violations" => "," }
                split => { "sub_violations" => "," }
            }
        }
}

output {
    if [type] == "botlogs" {
        elasticsearch {index => "bot.logs-%{+YYYY.MM.dd}"}
        stdout {}
        }
    if [type] == "httplogs" {
        elasticsearch {index => "http.logs-%{+YYYY.MM.dd}"}
        stdout {}
        }
        if [type] == "awflogs" {
        elasticsearch {index => "slat.logs-%{+YYYY.MM.dd}"}
        stdout {}
    }
}
